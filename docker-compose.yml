version: '3.9'

services:

  registry-service:
    build:
      context: ./registry-service-v2
    container_name: registry-service
    ports:
      - "8761:8761"
    networks:
      - backend-network

  api-gateway:
    build:
      context: ./api-gateway-v2
    container_name: api-gateway
    ports:
      - "8765:8765"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - registry-service
    networks:
      - backend-network

  users-service:
    build:
      context: ./users-service-v2
    container_name: users-service
    ports:
      - "8100:8100"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - registry-service
      - users-database
      - kafka
    networks:
      - backend-network

  users-database:
    image: mysql:8
    container_name: users-database
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: users-database
      MYSQL_USER: dev-users-service
      MYSQL_PASSWORD: dev123
    ports:
      - "3307:3306"
    networks:
      - backend-network

  post-service:
    build:
      context: ./post-service-v2
    container_name: post-service
    ports:
      - "8200:8200"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - registry-service
      - post-database
      - kafka
    networks:
      - backend-network

  post-database:
    image: mysql:8
    container_name: post-database
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: post-database
      MYSQL_USER: dev-posts-service
      MYSQL_PASSWORD: dev123
    ports:
      - "3308:3306"
    networks:
      - backend-network

  notification-service:
    build:
      context: ./notification-service
    container_name: notification-service
    ports:
      - "8400:8400"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - registry-service
      - notification-mongo
      - kafka
    networks:
      - backend-network

  notification-mongo:
    image: mongo:6
    container_name: notification-mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root123
      MONGO_INITDB_DATABASE: notification-service-mongodb
    ports:
      - "27017:27017"
    networks:
      - backend-network

  feed-service:
    build:
      context: ./feed-service
    container_name: feed-service
    ports:
      - "8300:8300"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - registry-service
    networks:
      - backend-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend-network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      - zookeeper
    networks:
      - backend-network


networks:
  backend-network:
    driver: bridge
